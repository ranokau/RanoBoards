<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dashboard de Control</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: "Indie Flower", cursive;
            color: #006400; /* Este es un ejemplo de un verde oscuro */
            font-weight: 400;
            font-style: normal;
            margin: 0;
            padding: 20px;
            display: flex;
            flex-direction: column; /* Cambia a column para distribución vertical */
            align-items: center;
            gap: 20px; /* Espacio entre cada división */
            background-color: rgba(0, 128, 128, 0.2); /* Verde medio azulado con alto nivel de transparencia */
        }
        h1 {
            font-size: 70px; /* Cambia esto al tamaño que desees */
            color: #4CAF50; /* Color del texto */
            /* otros estilos que quieras agregar al h1 */
        }

        .division {
            display: flex;
            flex-direction: column; /* Cambio importante para alinear los elementos verticalmente */
            width: 100%;
            gap: 20px; /* Espacio entre el título y el resto de los elementos */
        }
        .division > * {
            align-self: center; /* Centra todos los elementos excepto h2 */
        }

        .division h2 {
            font-size: 44px; /* Ajusta esto al tamaño que desees */
            font-weight: bold; /* Hace que el texto sea negrita */
            align-self: flex-start; /* Alinea h2 a la izquierda */
            width: 100%; /* Asegúrate de que h2 ocupe el ancho completo para alinearse correctamente */
            margin-left: 200px; /* O un valor específico que prefieras */
            /* Otros estilos que desees aplicar a los títulos h2 */
        }

        .content {
            display: flex;
            width: 100%;
            justify-content: space-between; /* Alinea los elementos a los extremos */
            align-items: center;
            gap:10px;
            /* Otros estilos necesarios para el contenedor de contenido */
        }

        .current-values {
            flex: 1; /* Cada sección ocupa 1/3 del espacio */
            display: flex;
            flex-direction: row; /* Para que los elementos internos se apilen horizontalmente */
            align-items: column;
            gap: 10px; /* Espacio entre elementos internos */
            display: grid;
            grid-template-columns: repeat(2, 1fr); /* Crea dos columnas de igual tamaño */
            grid-gap: 20px; /* Espacio entre los elementos de la cuadrícula */
            justify-items: center; /* Centra los elementos horizontalmente */
            width: 100%; /* Asegura que el contenedor ocupe el ancho disponible */
        }
        .buttons {
            flex: 1; /* Cada sección ocupa 1/3 del espacio */
            display: flex;
            flex-direction: row; /* Para que los elementos internos se apilen verticalmente */
            align-items: center;
            gap: 30px; /* Espacio entre elementos internos */
            margin-left: 200px; /* O un valor específico que prefieras */
        }
        .chart-container {  
            transition: transform 0.3s ease; /* Suaviza la transición */
            transform-origin: center; /* Asegura que el zoom se haga desde el centro */
            margin-right: 100px; /* Baja un poco la sección del medio */
        }
        .chart-container:hover {
            transform: scale(1.3); /* Aumenta el tamaño del contenedor y, por lo tanto, del gráfico */
        }
        .value-box {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0 10px;
        }
        .value-box img {
            margin-bottom: 5px; /* Espacio entre el icono y el texto */
        }
        .value-box span {
            display: block; /* Asegura que el texto ocupe su propia línea */
            text-align: center; /* Centra el texto horizontalmente */
            font-size: 50px; /* Ajusta este valor al tamaño de fuente deseado */
        }
        canvas {
            width: 100% !important;
            max-width: 700px; /* Ancho máximo para los gráficos */
            height: 360px !important; /* Altura fija para los gráficos */
        }


        .circular-button {
        border-radius: 50%; /* Esto hace que el botón sea circular */
        width: 80px; /* Anchura del botón */
        height: 80px; /* Altura del botón */
        border: none; /* Elimina el borde por defecto */
         /*color: white; /* Color del texto */
         background-color: transparent; /* Color de fondo del botón */
         padding:0;
         /*text-align: center; /* Centra el texto */
        /*line-height: 50px; /* Centra el texto verticalmente */
         /*text-decoration: none; /* Elimina la decoración del texto */
         /*display: inline-block; /* Permite dimensiones personalizadas */
         /*font-size: 16px; /* Tamaño del texto */
        cursor: pointer; /* Cambia el cursor a tipo 'pointer' */
        /*box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Sombra opcional para dar efecto de elevación */
        /*transition: background-color 0.3s; /* Efecto de transición para el cambio de color */
      }
    
      .circular-button:hover {
        background-color: transparent; /* Cambio de color al pasar el mouse */
      }
      .circular-button-on {
        background-color: transparent; /* verde claro */
        /* otros estilos para el botón encendido */
        }

      .circular-button-off {
        background-color:transparent; /* verde oscuro */
        /* otros estilos para el botón apagado */
        }
      .circular-button img {
            width: 100%; /* ajusta esto según el tamaño de tu icono */
            height: auto;
        }
    </style>
</head>
<body>
  <header>
    <h1><span style="color: #006400;">Monitoreo</span> <span style="color: #90EE90;">Invernadero</span></h1>
  </header>
  <div class="division" id="climatizacion">
    <h2><span style="color: #006400;">Clima</span><span style="color: #90EE90;">tización</span></h2>

    <div class="content">
      <div class="buttons">
          <!-- Botones para Climatización aquí -->
          <button  class="circular-button" onclick="toggleButton(this)" data-on="imagenes/ventilacion_on.png" data-off="imagenes/ventilacion_off.png">
            <img src="imagenes/ventilacion_off.png" alt="Boton Ventilacion" />
          </button>
          <button class="circular-button" onclick="toggleButton(this)" data-on="imagenes/humedad_on.png" data-off="imagenes/humedad_off.png">
            <img src="imagenes/humedad_off.png" alt="Boton Humedad" />
          </button>
      </div>
      <div class="current-values">
        <div class="value-box" data-series="temperatura">
            <img src="imagenes/temperatura.png" alt="Temperatura" style="width: 80px; height: 80px;">
            <span id="valor-temperatura">24°C</span>
        </div>
        <div class="value-box move-on-hover" data-series="humedad">
            <img src="imagenes/agua.png" alt="Humedad" style="width: 80px; height: 80px;">
            <span id="valor-humedad">60%</span>
        </div> 
        <div class="value-box" data-series="co2">
            <img src="imagenes/co2.png" alt="Co2" style="width: 80px; height: 80px;">
            <span id="valor-co2">400ppm</span>
        </div>
        <div class="value-box move-on-hover" data-series="vpd">
          <img src="imagenes/vpd.png" alt="vpd" style="width: 55px; height: 60px;">
          <span id="valor-vpd">400ppm</span>
      </div>
    </div>     
      <div class="chart-container">
          <!-- Gráfico para Climatización aquí -->
          <canvas id="climaChart"></canvas>
      </div>
  </div>
</div>

  <div class="division" id="nutricion">
    <h2><span style="color: #006400;">Nutri</span><span style="color: #90EE90;">ción</span></h2>

    <div class="content">
      <div class="buttons">
        <!-- Botones para Nutricion aquí -->
        <button  class="circular-button" onclick="toggleButton(this)" data-on="imagenes/minerales_on.png" data-off="imagenes/minerales_off.png">
          <img src="imagenes/minerales_off.png" alt="Boton EC" />
        </button>
        <button class="circular-button" onclick="toggleButton(this)" data-on="imagenes/medidor_ph_on.png" data-off="imagenes/medidor_ph_off.png">
          <img src="imagenes/medidor_ph_off.png" alt="Boton PH sube" />
        </button>
        </div>
        <div class="current-values">
          <div class="value-box">
              <img src="imagenes/minerales_off.png" alt="ec" style="width: 80px; height: 80px;">
              <span id="valor-ec">24°C</span>
          </div>
          <div class="value-box">
              <img src="imagenes/medidor_ph.png" alt="ph" style="width: 80px; height: 80px;">
              <span id="valor-ph">60%</span>
          </div> 
          <div class="value-box">
              <img src="imagenes/o2.png" alt="o2" style="width: 80px; height: 80px;">
              <span id="valor-o2">400ppm</span>
          </div>
          <div class="value-box">
            <img src="imagenes/temperatura.png" alt="temp" style="width: 80px; height: 80px;">
            <span id="valor-temp">400ppm</span>
        </div>
      </div>
        <div class="chart-container">
            <!-- Gráfico para Nutrición aquí -->
            <canvas id="phChart"></canvas>
        </div>
      </div>
  </div>
  <div class="division" id="luminosidad">
    <h2><span style="color: #006400;">Ilumi</span><span style="color: #90EE90;">nación</span></h2>

    <div class="content">
      <div class="buttons">
          <!-- Botones para Nutrición aquí -->
          <button>Luces NFT</button>
          <button>Luces Raizflotante</button>
      </div>
      <div class="current-values">
          <!-- Valores actuales para Nutrición aquí -->
          <span>Frecuencia NFT: 600hz</span>
          <span>Lumenes NFT: 1.2 mS/cm</span>
          <span>Frecuencia Raiz Flotante: 600hz</span>
          <span>Lumenes Raiz Flotante: 1.2 mS/cm</span>
      </div>
      <div class="chart-container">
          <!-- Gráfico para Nutrición aquí -->
          <canvas id="lightChart"></canvas>
      </div>
    </div>
  </div>
    <div class="division" id="riego">
      <h2>
        <span style="color: #006400;">Control</span> <!-- Verde oscuro -->
        <span style="color: #90EE90;">Riego</span> <!-- Verde claro -->
      </h2>
      <div class="content">
        <div class="buttons">
            <!-- Botones para Nutrición aquí -->
            <button>Bomba NFT</button>
            <button>Bomba Raiz flotante</button>
            <button>Bomba Osmosis Inversa</button>
        </div>
        <div class="current-values">
            <!-- Valores actuales para Nutrición aquí -->
            <span>flujo NFT: 30</span>
            <span>flujo Raiz Flotante: 20</span>
            <span> EC Osmosis inversa: 0.2</span>
            <span> PH Osmosis inversa: 0.7</span>
        </div>
        <div class="chart-container">
            <!-- Gráfico para Riego aca aquí -->
            <canvas id="riegoChart"></canvas>
        </div>
      </div>
    </div>
  </div>  
  <script>
        document.getElementById('climaChart').addEventListener('mouseover', function() {
        document.querySelectorAll('.move-on-hover').forEach(function(box) {
                box.style.transform = 'translateX(-60px)'; // Mueve los valores seleccionados hacia la izquierda
                box.style.transition = 'transform 0.3s ease'; // Suaviza la transición
            });
        });

        document.getElementById('climaChart').addEventListener('mouseout', function() {
            document.querySelectorAll('.move-on-hover').forEach(function(box) {
                box.style.transform = 'translateX(0px)'; // Devuelve los valores seleccionados a su posición original
            });
        });

        function toggleButton(clickedButton) {
        const buttonImage = clickedButton.querySelector("img");
        const isOn = buttonImage.src.includes(clickedButton.getAttribute("data-on"));

          if (isOn) {
            buttonImage.src = clickedButton.getAttribute("data-off");
          } else {
            buttonImage.src = clickedButton.getAttribute("data-on");
          }
        }

        async function actualizarValoresActuales() {
            try {
              const respuesta = await fetch('/ultimo-dato');
              const ultimoDato = await respuesta.json();

              // Actualiza los valores en el HTML
              document.querySelector("#valor-temperatura").textContent = ` ${ultimoDato.temperature}°C`;
              document.querySelector("#valor-humedad").textContent = ` ${ultimoDato.humidity}%`;
              document.querySelector("#valor-co2").textContent = ` ${ultimoDato.co2}ppm`;
              document.querySelector("#valor-vpd").textContent = ` ${ultimoDato.VPD}Pa`;
              document.querySelector("#valor-ec").textContent = ` ${ultimoDato.ec}ms/seg`;
              document.querySelector("#valor-ph").textContent = ` ${ultimoDato.ph}`;
              document.querySelector("#valor-o2").textContent = ` ${ultimoDato.o2}ppm`;
              document.querySelector("#valor-temp").textContent = ` ${ultimoDato.t_agua}°C`;
              // Continúa para el resto de los valores
            } catch (error) {
              console.error("Error al actualizar los valores actuales:", error);
            }
          }

          // Llama a la función de actualizar los valores cada 5 minutos
        setInterval(actualizarValoresActuales, 3000); // 3000 milisegundos = 3 segundos

          // También llama a la función al cargar la página
        document.addEventListener('DOMContentLoaded', actualizarValoresActuales);
      // Asegúrate de que esta sección de código se ejecuta después de que la página ha sido cargada completamente
        document.addEventListener('DOMContentLoaded', function () {
        const sensorData = JSON.parse('<%- sensor %>');
        const totalElements = sensorData.length;
        const start = Math.max(0, totalElements - 5); // Asegúrate de no tener un índice de inicio negativo
        const filteredData = sensorData.slice(start, totalElements); // Obtiene solo los últimos 5 elementos
        // Extrayendo los datos de sensorData y las etiquetas de tiempo
        const temperatura = filteredData.map(data => data.temperature);
        const humedad = filteredData.map(data => data.humidity);
        const co2 = filteredData.map(data => data.co2);
        const vpd = filteredData.map(data => data.VPD);
        const ph = filteredData.map(data=> data.ph)
        const ec = filteredData.map(data=> data.ec)
        const o2 = filteredData.map(data=> data.o2)
        const y_w = filteredData.map(data=> data.t_agua)
        const labels = filteredData.map(data => new Date(data.createdAt).toLocaleTimeString());

        // Define tus datasets aquí
        let originalDataSets = [
            {
                label: 'Temperatura',
                data: temperatura,
                borderColor: 'rgb(255, 99, 132)',
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                yAxisID: 'y',
                type: 'line'
            },
            {
                label: 'Humedad',
                data: humedad,
                borderColor: 'rgb(54, 162, 235)',
                backgroundColor: 'rgba(54, 162, 235, 0.5)',
                yAxisID: 'y1',
                type: 'line'
            },
            {
                label: 'CO2',
                data: co2,
                backgroundColor: 'rgba(75, 192, 192, 0.5)',
                yAxisID: 'y2',
                type: 'bar'
            },
            {
                label: 'VPD',
                data: vpd,
                backgroundColor: 'rgba(153, 102, 255, 0.5)',
                yAxisID: 'y3',
                type: 'line'
            }
        ];

        let selectedDataSets = {
            temperatura: true,
            humedad: true,
            co2: true,
            vpd: true
        };

        function updateChart() {
            const activeDatasets = originalDataSets.filter(dataset => selectedDataSets[dataset.label.toLowerCase()]);
    
          // Determinar qué ejes Y deben estar activos
            const activeYAxes = {
                y: activeDatasets.some(dataset => dataset.yAxisID === 'y'),
                y1: activeDatasets.some(dataset => dataset.yAxisID === 'y1'),
                y2: activeDatasets.some(dataset => dataset.yAxisID === 'y2'),
                y3: activeDatasets.some(dataset => dataset.yAxisID === 'y3'),
            };
            const ctx = document.getElementById('climaChart').getContext('2d');
            if (window.myChart) window.myChart.destroy();
            window.myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: activeDatasets
                },
                options: {
                    scales: {
                        y: {
                            display:activeYAxes.y,
                            type: 'linear',
                            position: 'left',
                            title:{
                              display:true,
                              text: 'Temperatura (Celsius)'
                            }
                        },
                        y1: {
                            display:activeYAxes.y1,

                            type: 'linear',
                            position: 'left',
                            title:{
                              drawOnChartArea: false,
                            },
                            title:{
                              display:true,
                              text:'Humedad (%)'
                            }
                        },
                        y2: {
                            display:activeYAxes.y2,
                            type: 'linear',
                            position: 'right',
                            title:{
                              display:true,
                              text:'CO2(ppm)'
                            }
                        },
                        y3: {
                            display:activeYAxes.y3,
                            type: 'linear',
                            position: 'right',
                            title:{
                              display:true,
                              text:'VPD(Pa)'
                            }
                        }
                    }
                }
            });
        }

        function toggleDataSeries(event) {
            const seriesName = event.currentTarget.dataset.series;
            selectedDataSets[seriesName] = !selectedDataSets[seriesName];
            updateChart();
        }

        document.querySelectorAll('.value-box').forEach(box => {
            box.addEventListener('click', toggleDataSeries);
        });

        updateChart();
    });
  </script>
</body>
</html>
